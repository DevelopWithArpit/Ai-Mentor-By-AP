
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow that provides clear, easy-to-understand explanations for complex answers,
 *               in a specified output language. Includes failover to a secondary model provider if the primary fails.
 *
 * - explainAnswer - A function that generates an explanation for a given question and answer.
 * - ExplainAnswerInput - The input type for the explainAnswer function.
 * - ExplainAnswerOutput - The return type for the explainAnswer function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ExplainAnswerInputSchema = z.object({
  question: z.string().describe('The question asked by the student. This question might be in any language.'),
  answer: z.string().describe('The complex answer to be explained. This answer might be in the same language as the question.'),
  outputLanguage: z.string().describe('The desired language for the explanation (e.g., "English", "Spanish", "Marathi").'),
});
export type ExplainAnswerInput = z.infer<typeof ExplainAnswerInputSchema>;

const ExplainAnswerOutputSchema = z.object({
  explanation: z.string().describe('A clear, easy-to-understand explanation of the answer, in the specified outputLanguage.'),
});
export type ExplainAnswerOutput = z.infer<typeof ExplainAnswerOutputSchema>;

export async function explainAnswer(input: ExplainAnswerInput): Promise<ExplainAnswerOutput> {
  return explainAnswerFlow(input);
}

const explanationPromptConfig = {
  name: 'explainAnswerBasePrompt', 
  inputSchema: ExplainAnswerInputSchema,
  outputSchema: ExplainAnswerOutputSchema,
  promptText: `You are an AI academic assistant. Your task is to provide a clear and easy-to-understand explanation for a given question and its answer.
The question and answer provided to you might be in a language other than English.
You MUST generate your explanation in the following language: {{{outputLanguage}}}.

Question: {{{question}}}
Answer: {{{answer}}}

Explanation (in {{{outputLanguage}}}):`,
};

const explainAnswerFlow = ai.defineFlow(
  {
    name: 'explainAnswerFlow',
    inputSchema: ExplainAnswerInputSchema,
    outputSchema: ExplainAnswerOutputSchema,
  },
  async (input): Promise<ExplainAnswerOutput> => {
    const primaryModel = 'googleai/gemini-2.0-flash';
    // const secondaryModel = 'openai/gpt-3.5-turbo'; 

    try {
      console.log(`Attempting to generate explanation with primary model: ${primaryModel} for language: ${input.outputLanguage}`);
     const {output} = await ai.generate({
  prompt: explanationPromptConfig.promptText,
  input: input, 
  output: { schema: explanationPromptConfig.outputSchema },
});
      if (!output) throw new Error('Primary model returned no output.');
      return output;
    } catch (primaryError: any) {
      console.warn(`Primary model (${primaryModel}) failed: ${primaryError.message}. Attempting secondary model logic (currently placeholder).`);
      
      // Placeholder for secondary model logic as discussed
      // To enable secondary model, uncomment and configure OpenAI in src/ai/genkit.ts and install the plugin.
      // try {
      //   console.log(`Attempting to generate explanation with secondary model: ${secondaryModel} for language: ${input.outputLanguage}`);
      //   const {output: secondaryOutput} = await ai.generate({
      //     model: secondaryModel,
      //     prompt: explanationPromptConfig.promptText,
      //     input: input,
      //     output: { schema: explanationPromptConfig.outputSchema },
      //   });
      //   if (!secondaryOutput) throw new Error('Secondary model returned no output after primary failed.');
      //   console.log('Successfully generated explanation with secondary model.');
      //   return secondaryOutput;
      // } catch (secondaryError: any) {
      //   console.error(`Secondary model (${secondaryModel}) also failed: ${secondaryError.message}.`);
      //   throw new Error(`Failed to generate explanation after trying all models. Last error (secondary): ${secondaryError.message}. Primary error: ${primaryError.message}`);
      // }

      console.error(`All models failed or secondary not configured. Last error (primary): ${primaryError.message}`);
      throw new Error(`Failed to generate explanation after trying available models. Primary error: ${primaryError.message}`);
    }
  }
);
